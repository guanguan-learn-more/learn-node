"use strict";

const EventEmitter = require('events').EventEmitter;
const request = require('request');
const fs = require('fs');
const Stream = require('stream');
const path = require('path');

class TPS extends EventEmitter {
  constructor(props, _options) {
    super(props);
    this.token = props.accesstoken;
    this.autoUpload = props.autoUpload;

    const options = _options || {};
    this.isDaily = props.daily || options.daily || false;
    this.isPrivate = props.private || options.private || false;
  }
  upload(file, options, callback) {

    // 将上传数据源统一为 Stream
    if (typeof file === 'string') {
      var stream = fs.createReadStream(file);
    } else if (file instanceof Stream) {
      var stream = file;
    } else {
      throw TypeError('只支持传入文件路径或Stream实例');
    }

    // 获得原始文件名，若未自定义文件名则使用该文件名上传
    try {
      const paths = stream.path.split('/');
      var originFileName = paths[paths.length - 1];
    } catch (e) {
      var originFileName = options.filename;
    }

    if (!options.nick || !options.empId) {
      throw Error('请填写上传者的工号和花名');
    }

    // 在使用本地文件时获取文件大小，其他来源暂无法实现
    let totalSize = NaN;
    try {
      var stat = fs.statSync(stream.path);
      if (stat && stat.isFile()) {
        // console.log('文件存在');
        totalSize = stat.size;
      } else {
        // console.log('文件不存在或不是标准文件');
      }
    } catch (e) {
      // console.log('文件不存在或不是标准文件');
    }

    // 设置 progress 事件触发
    let currentSize = 0;
    stream.on('data', (buffer) => {
      currentSize += buffer.length;
      this.emit('progress', {
        // totalSize: stream
        api: 'upload',
        path: stream.path,
        currentSize,
        currentChunkSize: buffer.length,
        totalSize
      })
    });

    // 创建promise
    let resolveCallback, rejectCallback;
    const promise = new Promise((resolve, reject) => {
      resolveCallback = resolve;
      rejectCallback = reject;
    });

    if (!callback) {
      callback = (err, body) => {
        if (err) {
          rejectCallback(err);
        } else {
          resolveCallback(body);
        }
      }
    }

    // 是否原图；是否压缩
    const type = `${options.useOrigin ? '1' : '0'}|${options.lossless ? '0' : '1'}`;

    // 开始上传
    request.post({
      url: this.isDaily ? `http://tps.taobao.net/api.imageupload` : `https://tps.alibaba-inc.com/api.imageupload`,
      qs: {
        nick: options.nick,
        work_id: options.empId,
        folder: options.folder,
        // type,
        quality: options.quality,
        accesstoken: this.token,
        client_token: this.token,
        private: this.isPrivate
      },
      timeout: 60 * 1000,
      json: true,
      formData: {
        file: {
          value: stream,
          options: {
            filename: options.filename || originFileName
          }
        }
      }
    }, (err, res, body) => {

      /**
       * 成功的情况：返回 statusCode < 300，body为返回数据
       * 错误的情况：1. statusCode >= 300 2. 返回 statusCode < 300，body 为json数据
       */

      if (res && res.statusCode && res.statusCode < 300 && (!body.status || body.status < 300)) {
        this.emit('success', {
          api: 'upload',
          path: stream.path,
          data: body,
          totalSize: currentSize
        });
        this.emit('complete', {
          api: 'upload',
          success: true,
          path: stream.path,
          data: body,
          totalSize: currentSize
        });
        callback(null, body);
      } else {
        const error = err || Error(body.msg || body);
        this.emit('fail', {
          api: 'upload',
          path: stream.path,
          error
        });
        this.emit('complete', {
          api: 'upload',
          success: false,
          path: stream.path,
          error
        });
        callback(error, null);
      }
    });

    return promise;
  }
  uploads(files, options, callback) {
    const parallel = options.parallel || false;
    const limit = parallel ? 5 : 1;
    const ret = [];

    let i = 0;
    const func = () => {
      const promises = [];
      const I = i;
      for (i; (i < I + limit && i < files.length ); i++) {
        const file = files[i];
        promises.push(this.upload(file, options));
      }
      return Promise.all(promises)
      .then((r) => {
        let cr = JSON.parse(JSON.stringify(r));
        ret.push(cr);

        if (i < files.length) {
          return func();
        } else {
          return ret;
        }
      });
    }

    if (callback) {
      func().then((ret) => {
        callback(null, ret);
      }).catch(err => {
        callback(err, null);
      });
    } else {
      return func();
    }
  }
  compress(file, options, callback) {

    // 将上传数据源统一为 Stream
    if (typeof file === 'string') {
      var stream = fs.createReadStream(file);
    } else if (file instanceof Stream) {
      var stream = file;
    } else {
      throw TypeError('只支持传入文件路径或Stream实例');
    }

    // 获得原始文件名，若未自定义文件名则使用该文件名上传
    try {
      const paths = stream.path.split('/');
      var originFileName = paths[paths.length - 1];
    } catch (e) {
      var originFileName = options.filename;
    }

    if (!options.nick || !options.empId) {
      throw Error('请填写上传者的工号和花名');
    }

    // 在使用本地文件时获取文件大小，其他来源暂无法实现
    let totalSize = NaN;
    try {
      var stat = fs.statSync(stream.path);
      if (stat && stat.isFile()) {
        // console.log('文件存在');
        totalSize = stat.size;
      } else {
        // console.log('文件不存在或不是标准文件');
      }
    } catch (e) {
      // console.log('文件不存在或不是标准文件');
    }

    // 设置 progress 事件触发
    let currentSize = 0;
    stream.on('data', (buffer) => {
      currentSize += buffer.length;
      this.emit('progress', {
        // totalSize: stream
        api: 'compress',
        path: stream.path,
        currentSize,
        currentChunkSize: buffer.length,
        totalSize
      })
    });

    // 创建promise
    let resolveCallback, rejectCallback;
    const promise = new Promise((resolve, reject) => {
      resolveCallback = resolve;
      rejectCallback = reject;
    });

    if (!callback) {
      callback = (err, body) => {
        if (err) {
          rejectCallback(err);
        } else {
          resolveCallback(body);
        }
      }
    }

    // 开始上传
    request.post({
      url: this.isDaily ? `http://tps.taobao.net/api.compress` : `https://tps.alibaba-inc.com/api.compress`,
      qs: {
        nick: options.nick,
        work_id: options.empId,
        // type,
        quality: options.quality,
        accesstoken: this.token
      },
      timeout: 60 * 1000,
      json: false,
      encoding: null,
      formData: {
        file: {
          value: stream,
          options: {
            filename: options.filename || originFileName
          }
        }
      }
    }, (err, res, body) => {

      /**
       * 成功的情况：返回 statusCode < 300，body为返回数据
       * 错误的情况：1. statusCode >= 300 2. 返回 statusCode < 300，body 为json数据
       */

      if (res && res.statusCode && res.statusCode < 300 && (!body.status || body.status < 300)) {
        this.emit('success', {
          api: 'compress',
          path: stream.path,
          data: body,
          totalSize: currentSize
        });
        this.emit('complete', {
          api: 'compress',
          success: true,
          path: stream.path,
          data: body,
          totalSize: currentSize
        });
        callback(null, body);
      } else {
        const error = err || Error(body.msg || body);
        this.emit('fail', {
          api: 'compress',
          path: stream.path,
          error
        });
        this.emit('complete', {
          api: 'compress',
          success: false,
          path: stream.path,
          error
        });
        callback(error, null);
      }
    });

    return promise;
  }
}


module.exports = TPS;

