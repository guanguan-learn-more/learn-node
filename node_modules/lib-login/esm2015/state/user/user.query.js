import { Injectable } from '@angular/core';
import { Query } from '@datorama/akita';
import * as i0 from "@angular/core";
import * as i1 from "./user.store";
export class UserQuery extends Query {
    constructor(userStore) {
        super(userStore);
        this.userStore = userStore;
    }
    // get user
    getUserDetail() {
        return this.select(state => state.user);
    }
    // get user data loading status
    getUserLoadingStatus() {
        return this.select(state => state.isLoaded);
    }
    // get CSRF token
    getCsrfToken() {
        return this.select(state => state.csrfToken);
    }
    // get JWT token
    getJwtToken() {
        return this.select(state => state.jwtToken);
    }
    // update user loading status
    updateUserLoadingStatus(status) {
        return this.userStore.update(state => {
            return {
                isLoaded: status
            };
        });
    }
    // update user data
    updateUserData(user = {}) {
        this.userStore.update(state => {
            return {
                user: user,
                isLoaded: true
            };
        });
    }
    // update CSRF token
    updateCsrfToken(token) {
        this.userStore.update(state => {
            return {
                csrfToken: token
            };
        });
    }
    // update JWT token
    updateJwtToken(token) {
        console.log('updupdateJwtToken token ', token);
        return this.userStore.update(state => {
            return {
                jwtToken: token
            };
        });
    }
}
UserQuery.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserQuery, deps: [{ token: i1.UserStore }], target: i0.ɵɵFactoryTarget.Injectable });
UserQuery.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserQuery, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserQuery, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.UserStore }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci5xdWVyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYi1sb2dpbi9zcmMvc3RhdGUvdXNlci91c2VyLnF1ZXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7QUFLeEMsTUFBTSxPQUFPLFNBQVUsU0FBUSxLQUFnQjtJQUU3QyxZQUNZLFNBQW9CO1FBRTlCLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUZQLGNBQVMsR0FBVCxTQUFTLENBQVc7SUFHaEMsQ0FBQztJQUVELFdBQVc7SUFDWCxhQUFhO1FBQ1gsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCwrQkFBK0I7SUFDL0Isb0JBQW9CO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUM3QyxDQUFDO0lBRUQsaUJBQWlCO0lBQ2pCLFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELGdCQUFnQjtJQUNoQixXQUFXO1FBQ1QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCw2QkFBNkI7SUFDN0IsdUJBQXVCLENBQUMsTUFBZTtRQUNyQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ25DLE9BQU87Z0JBQ0wsUUFBUSxFQUFFLE1BQU07YUFDakIsQ0FBQTtRQUNILENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELG1CQUFtQjtJQUNuQixjQUFjLENBQUMsSUFBSSxHQUFHLEVBQUU7UUFDdEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDNUIsT0FBTztnQkFDTCxJQUFJLEVBQUUsSUFBSTtnQkFDVixRQUFRLEVBQUUsSUFBSTthQUNmLENBQUE7UUFDSCxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFRCxvQkFBb0I7SUFDcEIsZUFBZSxDQUFDLEtBQWE7UUFDM0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDNUIsT0FBTztnQkFDTCxTQUFTLEVBQUUsS0FBSzthQUNqQixDQUFBO1FBQ0gsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDO0lBRUQsbUJBQW1CO0lBQ25CLGNBQWMsQ0FBQyxLQUFhO1FBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDL0MsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNuQyxPQUFPO2dCQUNMLFFBQVEsRUFBRSxLQUFLO2FBQ2hCLENBQUE7UUFDSCxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7O3VHQWhFVSxTQUFTOzJHQUFULFNBQVMsY0FESSxNQUFNOzRGQUNuQixTQUFTO2tCQURyQixVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUXVlcnkgfSBmcm9tICdAZGF0b3JhbWEvYWtpdGEnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFVzZXJTdG9yZSwgVXNlclN0YXRlIH0gZnJvbSAnLi91c2VyLnN0b3JlJztcclxuXHJcbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXHJcbmV4cG9ydCBjbGFzcyBVc2VyUXVlcnkgZXh0ZW5kcyBRdWVyeTxVc2VyU3RhdGU+IHtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcm90ZWN0ZWQgdXNlclN0b3JlOiBVc2VyU3RvcmVcclxuICApIHtcclxuICAgIHN1cGVyKHVzZXJTdG9yZSk7XHJcbiAgfVxyXG5cclxuICAvLyBnZXQgdXNlclxyXG4gIGdldFVzZXJEZXRhaWwoKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLnNlbGVjdChzdGF0ZSA9PiBzdGF0ZS51c2VyKTtcclxuICB9XHJcblxyXG4gIC8vIGdldCB1c2VyIGRhdGEgbG9hZGluZyBzdGF0dXNcclxuICBnZXRVc2VyTG9hZGluZ1N0YXR1cygpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0KHN0YXRlID0+IHN0YXRlLmlzTG9hZGVkKVxyXG4gIH1cclxuXHJcbiAgLy8gZ2V0IENTUkYgdG9rZW5cclxuICBnZXRDc3JmVG9rZW4oKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcclxuICAgIHJldHVybiB0aGlzLnNlbGVjdChzdGF0ZSA9PiBzdGF0ZS5jc3JmVG9rZW4pO1xyXG4gIH1cclxuXHJcbiAgLy8gZ2V0IEpXVCB0b2tlblxyXG4gIGdldEp3dFRva2VuKCk6IE9ic2VydmFibGU8c3RyaW5nPiB7XHJcbiAgICByZXR1cm4gdGhpcy5zZWxlY3Qoc3RhdGUgPT4gc3RhdGUuand0VG9rZW4pO1xyXG4gIH1cclxuXHJcbiAgLy8gdXBkYXRlIHVzZXIgbG9hZGluZyBzdGF0dXNcclxuICB1cGRhdGVVc2VyTG9hZGluZ1N0YXR1cyhzdGF0dXM6IGJvb2xlYW4pOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybiB0aGlzLnVzZXJTdG9yZS51cGRhdGUoc3RhdGUgPT4ge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGlzTG9hZGVkOiBzdGF0dXNcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIC8vIHVwZGF0ZSB1c2VyIGRhdGFcclxuICB1cGRhdGVVc2VyRGF0YSh1c2VyID0ge30pIHtcclxuICAgIHRoaXMudXNlclN0b3JlLnVwZGF0ZShzdGF0ZSA9PiB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdXNlcjogdXNlcixcclxuICAgICAgICBpc0xvYWRlZDogdHJ1ZVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgLy8gdXBkYXRlIENTUkYgdG9rZW5cclxuICB1cGRhdGVDc3JmVG9rZW4odG9rZW46IHN0cmluZykge1xyXG4gICAgdGhpcy51c2VyU3RvcmUudXBkYXRlKHN0YXRlID0+IHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBjc3JmVG9rZW46IHRva2VuXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICAvLyB1cGRhdGUgSldUIHRva2VuXHJcbiAgdXBkYXRlSnd0VG9rZW4odG9rZW46IHN0cmluZykge1xyXG4gICAgY29uc29sZS5sb2coJ3VwZHVwZGF0ZUp3dFRva2VuIHRva2VuICcsIHRva2VuKTtcclxuICAgIHJldHVybiB0aGlzLnVzZXJTdG9yZS51cGRhdGUoc3RhdGUgPT4ge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGp3dFRva2VuOiB0b2tlblxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbn1cclxuIl19