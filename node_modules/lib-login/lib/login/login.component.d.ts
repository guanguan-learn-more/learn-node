import { OnDestroy, OnInit, EventEmitter } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { UserQuery } from '../../state/user/user.query';
import { AuthService } from '../../services/auth.service';
import * as i0 from "@angular/core";
export declare class LoginComponent implements OnInit, OnDestroy {
    private fBuilder;
    private authService;
    private userQuery;
    private router;
    private route;
    getToken: EventEmitter<any>;
    environment: {
        production: boolean;
        api: {
            baseUrl: string;
            auth: {
                login: string;
                userAuthentication: string;
                changePassword: string;
                getUsers: string;
                jwtToken: string;
                user_like: string;
                user_snowlike: string;
                searchSolution: string;
                searchSolutionDetail: string;
                updateUser: string;
                activeUser: string;
                deleteUser: string;
                getUser: string;
            };
        };
        keys: {
            ENCRYPT_DECRYPT_KEY: string;
            IV: string;
        };
    };
    loginForm: FormGroup;
    formError: boolean;
    isPasswordErr: boolean;
    isRemainingAttempts: boolean;
    remainingAttemptsCount: number;
    isLocked: boolean;
    errMsg: string;
    userNameError: boolean;
    isLoaderShow: boolean;
    constructor(fBuilder: FormBuilder, authService: AuthService, userQuery: UserQuery, router: Router, route: ActivatedRoute);
    ngOnInit(): void;
    createForm(): void;
    loginUser(): void;
    removeLockStatus(): void;
    hideLoader(): void;
    showLoader(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<LoginComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<LoginComponent, "lib-login", never, {}, { "getToken": "getToken"; }, never, never>;
}
